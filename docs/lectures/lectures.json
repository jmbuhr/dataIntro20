[
  {
    "path": "lectures/lecture1/",
    "title": "Lecture 1",
    "description": "... in which we get started with R and RStudio,\nexplore the basic structures and operations of R\nand build our first plot by discovering a Grammar\nof Graphics.",
    "author": [
      {
        "name": "Jannik Buhr",
        "url": "https://jmbuhr.de"
      }
    ],
    "date": "2020-11-02",
    "categories": [
      "lecture"
    ],
    "contents": "\n\nContents\nVideo\nSlides\nScript\nWhat You will Learn\nFirst Things First: Installing R\nExecuting R Code\nBuilding Blocks of R\nAtomic Datatypes\nVariables\nFunctions\nVectors\nVectorization\n\nFunctions and Packages – Making our lives easier\nThe Tidyverse\n\nLiterate Programming: Rmarkdown\nOur First Dataset: The Palmer Penguins\nLists and dataframes\n\nTranslating Data into Visualizations\nThe Community: There to catch You.\n\nExercises\nSolutions\nResources\nTidyverse\nRmarkdown\nR in general\nStatistics\nTalks, Podcasts, Blogs, Videos\nMisc\n\n\nVideo\nWatch today’s video here:\n\n\nSlides\nHover over the slides and press f for full screen mode. Press ? for a list of keyboard shortcuts. The arrow keys bring you to the next and previous slide.\n\n\n\n\nScript\nWhat You will Learn\nThroughout your scientific career — and potentially outside of it — you will encounter various forms of data. Maybe you do an experiment and measured the fluorescence of a molecular probe, or you simply count the penguins at your local zoo. Everything is data in some form or another. But raw numbers without context are meaningless and tables of numbers are not only boring to look at, but often hide the actual structure in the data.\nIn this course you will learn to handle different kinds of data. You will learn to create pretty and insightful visualizations, compute different statistics on your data and also what these statistical concepts mean. From penguins to p-values, I got you covered.\nThe course will be held in English, as the concepts covered will directly transfer to the research you do, where the working language is English. That being said, feel free to ask questions in any language that I understand, so German is also fine. My Latin is a little rusty, thought.\nIn this course, we will be using the programming language R. R is a language particularly well suited for data analysis, because it was initially designed by statisticians and because of the interactive nature of the language, which makes it easier to get started. So don’t fret if this is your first encounter with programming, we will take one step at a time.\nThe datasets chosen to illustrate the various concepts and tools are not particularly centered around Biology. Rather, I chose general datasets that require less introduction and enable us to focus on learning R and statistics. This is why we will be talking about penguins, racing games or life expectancy instead of intricate molecular measurements.\nFirst Things First: Installing R\n\n\n\n\n\nBut I was getting ahead of myself. First, we need to install R. You can download the installer for your operating system here: https://cran.r-project.org/. Feel free to post a question if you get stuck. This already gives you the ability to execute R code or use the interactive R console, but it is way more comfortable to use R inside of a so called IDE (Integrated Development Environment). IDEs give you neat things like autocompletion, a window for your plots and a help panel. The main IDE for R is called RStudio. We will be using it for this course and you can download it here: https://www.rstudio.com/products/rstudio/download/#download\n\n\n\nExecuting R Code\nYou can now execute commands in the R console in the bottom left. For example we can calculate a mathematical expression:\n\n\n1 + 1\n\n\n[1] 2\n\nOr generate the numbers from one to 10:\n\n\n1:10\n\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nBut I rarely type directly into the console. Because we want our results to be reproducible, we write our code in a script first, so that the next person1 can see what we did and replicate our analysis. You will see that reproducibility is quite near and dear to me, so it will pop up once or twice. And as scientists, I am sure you understand the importance.\nTo create a new script, click the little button in the top left corner. In a script you can type regular R code, but it won’t get executed straight away. To send a line of code to the console to be executed, hit Ctrl+Enter. Go ahead, try it with:\n\n\npaste(\"Hello\", \"World!\")\n\n\n[1] \"Hello World!\"\n\nThe paste function combines text, just like + combines numbers. Your code can have comments to tell your future self why you wrote a piece of code the way you did. Any line starting with the number symbol # will be ignored by R.\n\n\n# This line will be ignored\n43 - 1 # as will be the part after this #, but not before it\n\n\n[1] 42\n\nBuilding Blocks of R\nNow it is time to introduce you to the fundamental datatypes of R. We are going to cover the so called atomic datatypes first and introduce others as they appear.\nAtomic Datatypes\nFirst we have numbers (which internally are called numeric or double)\n\n\n12\n12.5\n\n\n\nThen, there are whole numbers (integer)\n\n\n1L # denoted by L\n\n\n\nas well as the rarely used complex numbers (complex)\n\n\n1 + 3i # denoted by the small i for the imaginary part\n\n\n\nText data however will be used more often (character, string). Everything enclosed in quotation marks will be treated as text. Double or single quotation marks are both fine.\n\n\n\"It was night again.\"\n'This is also text'\n\n\n\nLogical values can only contain yes or no, or rather TRUE and FALSE in programming terms (boolean, logical).\n\n\nTRUE\nFALSE\n\n\n\nThere are some special types that mix with any other type. Like NULL for no value and NA for Not Assigned.\n\n\nNULL\nNA\n\n\n\nNA is contagious. Any computation involving NA will return NA (because R has no way of knowing the answer):\n\n\nNA + 1\n\n\n[1] NA\n\nmax(NA, 12, 1)\n\n\n[1] NA\n\nBut some functions can remove NAs before giving us an answer:\n\n\nmax(NA, 12, 1, na.rm = TRUE)\n\n\n[1] 12\n\nYou can ask for the datatype of an object with the function typeof:\n\n\ntypeof(\"hello\")\n\n\n[1] \"character\"\n\nThere is also a concept called factors (factor) for categorical data, but we will talk about that later, when we get deeper into vectors.\nVariables\nOften, you will want to store the result of a computation for reuse, or to give it a sensible name and make your code more readable. This is what variables are for. We can assign a value to a variable using the assignment operator <- (In RStudio, there is a shortcut for it: Alt+Minus):\n\n\nmy_number <- 42\n\n\n\nExecuting the above code will not give you any output, but when you use the name of the variable, you can see its content.\n\n\nmy_number\n\n\n[1] 42\n\nAnd you can do operations with those variables:\n\n\nx <- 41\ny <- 1\nx + y\n\n\n[1] 42\n\n\nNOTE Be careful about the order of execution! R enables you to work interactively and to execute the code you write in your script in any order with Ctrl+Enter, but when you execute (=“source”) the whole script, it will be executed from top to bottom.\n\nFurthermore, code is not executed again automatically, if you change some dependency of the expression later on. So the second assignment to x doesn’t change y.\n\n\nx <- 1\ny <- x + 1\nx <- 1000\ny\n\n\n[1] 2\n\nVariable names can contain letters (capitalization matters), numbers (but not as the first character) and underscores _.2\n\n\n# snake_case\nmain_character_name <- \"Kvothe\"\n\n# or camelCase\nbookTitle <- \"The Name of the Wind\"\n\n# you can have numbers in the name\nx1 <- 12\n\n\n\nA depiction of various naming styles (“Artwork by @allison_horst” 2020).Functions\n\nIn R, everything that exists is an object, everything that does something is a function.\n\nFunctions are the main workhorse of our data analysis. For example, there are mathematical functions, like sin, cos etc.\n\n\nsin(x = 0)\n\n\n[1] 0\n\nFunctions take arguments (sometimes called parameters) and sometimes they also return things. The sin function takes just one argument x and returns its sine. What we do with the returned value is up to us. We can use it directly in another computation or store it in a variable. If we don’t do anything with the return value, R simply prints it to the console.\nNote, that the = inside the function parenthesis gives x = 0 to the function and is separate from any x defined outside of the function. For example:\n\n\nx <- 10\ncos(x = 0)\n\n\n[1] 1\n\n# x outside of the function is still 10\nx\n\n\n[1] 10\n\nTo learn more about a function in R, execute ? with the function name or press F1 with your mouse over the function. This is actually one of the most important things to learn today, because the help pages can be… well… incredibly helpful.\n\n\n?sin\n\n\n\nWe can pass arguments by name or by order of appearance. The following two expressions are equivalent.\n\n\nsin(x = 12)\nsin(12)\n\n\n\nVectors\nA vector is an ordered collection of things which have the same datatype, where a datatype is something like numbers (numeric), text (character also called string) or whole numbers (integer).\nThe basic datatypes in R are all vectors, which means they can contain more than one entry. You can create a vector by combining things of the same data type with the function c for combine.\n\n\nx <- c(1, 2, 3, 4, 5, 6)\nx\n\n\n[1] 1 2 3 4 5 6\n\nAny atomic datatype mentioned above can be in a vector, but atomic vectors can only store data of the same type. For example, you can have a character vector\n\n\nc(\"This\", \"is\", \"a\", \"character\", \"vector\")\n\n\n[1] \"This\"      \"is\"        \"a\"         \"character\" \"vector\"   \n\nor a vector of logical values\n\n\nc(TRUE, FALSE, TRUE, TRUE)\n\n\n[1]  TRUE FALSE  TRUE  TRUE\n\nBut not a vector with, say text and numbers. If we try to combine data of a different type, R will force all the data into the more permissive type. Because all Numbers can easily be converted into text, but not all text can be converted to numbers, this makes everything text in this example:\n\n\nc(\"Some text\", 42, 12)\n\n\n[1] \"Some text\" \"42\"        \"12\"       \n\nNote the quotation marks around the numbers, marking them as text. If we were to try and use them as numbers, we would get and error message:\n\n\n\"12\" + 1\n\n\nError in \"12\" + 1: non-numeric argument to binary operator\n\nThere are other cases where we will encounter error messages. Programming languages are not unlike human languages. The computer will not always understand, what you want it to do, unless you use exactly the right grammar and vocabulary. An error messages is R’s way of telling us, that it didn’t understand, or that we asked it to do something impossible. Even experienced programmers are very fond of this advice:\n\n\n\nFigure 1: Maybe the most important programming advice.\n\n\n\nTo solve above error message, we need to explicitly tell R to convert the text to a number:\n\n\nas.numeric(\"12\") + 1\n\n\n[1] 13\n\nSubsetting\nWe can look at, or change, subsets of vectors using square brackets [] like so:\n\n\nmy_elements <- c(\"first\", \"second\", \"third\")\nmy_elements[2]\n\n\n[1] \"second\"\n\n\n\nmy_elements[3] <- \"new element\"\nmy_elements\n\n\n[1] \"first\"       \"second\"      \"new element\"\n\nIf we assign names to the elements, we can also reference them by name.\n\n\nnames(my_elements) <- c(\"e1\", \"e2\", \"e3\")\nmy_elements\n\n\n           e1            e2            e3 \n      \"first\"      \"second\" \"new element\" \n\n\n\nmy_elements[\"e3\"]\n\n\n           e3 \n\"new element\" \n\nPass a vector of indices (or names) to the square brackets to get (or set) multiple elements:\n\n\nmy_elements[c(1, 3)]\n\n\n           e1            e3 \n      \"first\" \"new element\" \n\nUsing a logical vector yields all elements where the vector is TRUE:\n\n\nmy_elements[c(TRUE, TRUE, FALSE)]\n\n\n      e1       e2 \n \"first\" \"second\" \n\nVectorization\nThe basic mathematical operations in R and a lot of functions are vectorized. This means, they operate on every element of the vector. Here, every element is multiplied by 2 and the result is printed to the console.\n\n\nx * 2\n\n\n[1]  2  4  6  8 10 12\n\nThe original vector x was not changed in doing so.\n\n\nx\n\n\n[1] 1 2 3 4 5 6\n\nBut we could have, by assigning the result back to x, thus overwriting its previous content. The right hand side (RHS) is executed first:\n\n\nx <- x * 2\n\n\n\nNow x changed:\n\n\nx\n\n\n[1]  2  4  6  8 10 12\n\nA handy way of creating vectors of numbers is with the : operator to specify a range of values:\n\n\n1:5\n\n\n[1] 1 2 3 4 5\n\nOr using the seq function with some additional (optional) parameters:\n\n\nseq(from = 1, to = 10)\n\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nNow you: Look at the documentation/help page for seq and find out how to create a vector of all even numbers from 2 to 100.\n\nFunctions and Packages – Making our lives easier\nYou just learned about the functions sin, seq and max. But wait, there is more! Not only in the sense that there are more functions in R (what kind of language would that be with only two verbs?!), but also in a more powerful way:\n\nWe can define our own functions!\n\nThe syntax (\\(\\leftarrow\\) grammar for programming languages) is as follows.\n\n\nname_for_the_function <- function(parameter1, parameter2, ...) { # etc.\n  # body of the function\n  # things happen\n  result <- parameter1 + parameter2\n  # Something the function should return to the caller\n  return(result)\n}\n\n\n\nThe function ends when it reaches the return keyword. It also ends when it reaches the end of the function body and implicitly returns the last expression. So we could have written it a bit shorter and in fact you will often see people omitting the explicit return at the end:\n\n\nadd <- function(x, y) {\n  x + y\n}\n\n\n\nAnd we can call our freshly defined function:\n\n\nadd(23, 19)\n\n\n[1] 42\n\nGot an error like Error in add(23, 19) : could not find function \"add\"? Check that you did in fact execute the code that defines the function (i.e. put your cursor on the line with the function keyword and hit Ctrl+Enter.).\n\nNow you: Define a function that takes one argument, a vector of numbers, devides each element by the length of the vector (hint: length is the function to get the length) and returns the resulting scaled vector.\n\nYou are not the only one using R. There is a welcoming and helpful community out there. Some people also write a bunch of functions and put them together in a so called package. And some people even went a step further. The tidyverse is a collection of packages that play very well together and also iron out some of the quirkier ways in which R works (Wickham et al. 2019). They provide a consistent interface to enable us to do more while having to learn less special cases. The R function install.packages(\"<package_name_here>\") installs packages from CRAN a curated set of R packages.\nThe Tidyverse\nGo ahead and install the tidyverse packages with\n\n\ninstall.packages(\"tidyverse\")\n\n\n\nThis is one exception to our effort of having everything in our script and not just in the console. We don’t want R trying to install the package every time we run the script, as this needs to happen only once. So you can either turn it into a comment, delete it from the script, or only type it in the console. You can also use RStudio’s built-in panel for package installation.\n\n\n\nTo make the functions from a package available to your R session, run the library function with the name of the package.\n\n\nlibrary(tidyverse)\n\n\n\nThe convention is, to keep all library-calls at the top of your script, so that you ,and others, can see straight away, which packages are needed. Don’t worry about the messages that pop up. This is just the tidyverse telling us that two of it’s functions (lag and filter) have functions with the same names in another package (or in this case base-R) and because we loaded the tidyverse second, R will now use the tidyverse functions. This is what “masking” means.\nLiterate Programming: Rmarkdown\n\n\n\n(“Artwork by @allison_horst” 2020)There is another package I would like you to install. It is called Rmarkdown.\n\n\ninstall.packages(\"rmarkdown\")\n\n\n\nRmarkdown enables us, to combine text with code and then produce a range of output formats like pdf, html, word documents, presentations etc. In fact, this whole website, including the slides, was created with Rmarkdown. Sounds exciting? Let’s dive into it!\nOpen up a new Rmarkdown document with the file extension .Rmd from the New File menu in the top left corner of RStudio: File → New File → R Markdown and choose html as the output format. I particularly like html, because you don’t have to worry about page breaks and it easily works on screens of different sizes, like your phone.\nAn Rmarkdown document consists of three things:\nMetadata:\nInformation about your document such as the author or the date in a format called YAML. This YAML header starts and ends with three minus signs ---.\nText:\nRegular text is interpreted as markdown, meaning it supports things like creating headings by prefixing a line with #, or text that will be bold in the output by surrounding it with **.\nCode chunks:\nStarting with ```{r} and ending with ``` (backticks). They will be interpreted as R code. This is where you write the code like you did in the .R script file. You can insert new chunks with the button on the top right of the editor window or use the shortcut Ctrl+Alt+i.\nUse these to document your thoughts alongside your code when you are doing data analysis. Future you (and reviewer number 2) will be happy! To run code inside of chunks, use,the little play button on the chunk, the tried and true Ctrl+Enter to run one line, or Ctrl+Shift+Enter to run the whole chunk. Your chunks can be as large or small as you want, but try to maintain some sensible structure.\nOur First Dataset: The Palmer Penguins\n(“Artwork by @allison_horst” 2020)So let’s explore our first dataset together in a fresh Rmarkdown document. The setup chunk is special. It gets executed automatically before any other chunk in the document is run. This makes it a good place to load packages. The dataset we are working with today actually comes in its own package, so we need to install this as well (Yes, there is a lot of installing today, but you will have to do this only once):\n\n\ninstall.packages(\"palmerpenguins\")\n\n\n\nAnd then we populate our setup chunk with\n\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\n\n\nThis gives us the penguins dataset (Horst, Hill, and Gorman 2020):\n\n\npenguins\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\nAdelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\nAdelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\nAdelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\nAdelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\nAdelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\nAdelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n2007\n\nLet’s talk about the shape of the penguins object. The str function reveals the structure of an object to us.\n\n\nstr(penguins)\n\n\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n\nLists and dataframes\nPreviously, we only had atomic vectors, where all elements are of the same type, like a vector of numbers, and the individual elements could not contain other things themselves (hence the name atomic): c(1, 2, 3). The next more general thing is a list, which we can create with the function list(...). Lists can contain arbitrary elements, even other lists:\n\n\nmy_list <- list(1, \"hello\", c(1, 2, 3), list(42, \"text\"))\nmy_list\n\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] \"hello\"\n\n[[3]]\n[1] 1 2 3\n\n[[4]]\n[[4]][[1]]\n[1] 42\n\n[[4]][[2]]\n[1] \"text\"\n\nThe print output suggests something else: For vectors, we could subset them using [], but here we will need double square brackets [[]].\n\n\nmy_list[[3]]\n\n\n[1] 1 2 3\n\nUsing single brackets would just give us a subset of the list, not the actual element of the list (yes, this can be confusing):\n\n\nmy_list[3]\n\n\n[[1]]\n[1] 1 2 3\n\nThe penguins variable contains what is called a data.frame. The reason I talked about lists just now is that dataframes are built on top of lists, where the elements are the columns. Because dataframes form this rectangular data format like a spreadsheet you know from excel, the constraint is that the elements of the list need to have the same length. We can demonstrate this by creating our own dataframe from a list.\n\n\nnew_list <- list(x = 1:3, y = c(10, 42, 3), third = c(\"hello\", \"from\", \"R\"))\nnew_list\n\n\n$x\n[1] 1 2 3\n\n$y\n[1] 10 42  3\n\n$third\n[1] \"hello\" \"from\"  \"R\"    \n\nNotice that I did another thing: I gave names to the elements of the list. This is nice because of two reasons. Firstly, as the print output already suggests, we can now use the dollar syntax $ to refer to the individual elements by name instead of by position and RStudio’s autocomplete helps us out.\n\n\nnew_list$x\n\n\n[1] 1 2 3\n\nSecondly, the names will become column names when we turn it into a dataframe:\n\n\nmy_first_df <- as.data.frame(new_list)\nmy_first_df\n\n\n  x  y third\n1 1 10 hello\n2 2 42  from\n3 3  3     R\n\nThere is one last difference for the penguins. They are also a tibble, which is again built on top of dataframes and makes the object look nicer when we print it to the console. Compare the following when executing them in the console:\n\n\npenguins\nas.data.frame(penguins)\n\n\n\nThe dataset contains data for 344 penguins. of 3 different species, collected from 3 islands in the Palmer Archipelago, Antarctica3.\nTranslating Data into Visualizations\nYou probably took this course because you want to build some cool visualizations for you data. In order to do that, let us talk about how we can describe visualizations. Just like language has grammar, some smart people came up with a grammar of graphics (Wilkinson et al. 2005), which was then slightly modified and turned into an R package so that we can not only talk about but also create visualizations using this grammar (Wickham 2010).\n\n\n\n\n\nThe package is called ggplot2 and we already have it loaded because it is included in the tidyverse. Before looking at the code, we can describe what we need in order to create this graphic.\n\n\n\nggplot(penguins, aes(flipper_length_mm, bill_length_mm,\n                     color = species,\n                     shape = sex)) +\n  geom_point(size = 2.5) +\n  labs(x = \"Flipper length [mm]\",\n       y = \"Bill length [mm]\",\n       title = \"Penguins!\",\n       subtitle = \"The 3 penguin species can differentiated by their flipper and bill lengths\") +\n  theme_minimal() +\n  scale_color_brewer(type = \"qual\")\n\n\n\n\nWe can build this plot up step by step. The data is the foundation of our plot, but this just gives us an empty plotting canvas. I am assigning the individual steps we are going through to a variable, so that we can sequentially add elements, but you can do this in one step as shown above.\n\n\nplt <- ggplot(penguins)\nplt\n\n\n\n\nThen, we add and aesthetic mapping to the plot. It creates a relation from the features of our dataset (like the flipper length of each penguin) to a visual property, like position of the x-axis, color or shape.\n\n\nplt <- ggplot(penguins,\n              aes(x = flipper_length_mm,\n                  y = bill_length_mm,\n                  color = species,\n                  shape = sex))\nplt\n\n\n\n\nStill, the plot is empty, it only has a coordinate system with a certain scale. This is because we have no geometric objects to represent our aesthetics. Elements of the plot are added using the + operator and all geometric elements that ggplot knows start with geom_. Let’s add some points:\n\n\nplt <- plt +\n  geom_point()\nplt\n\n\n\n\nLook at the help page for geom_point to find out what aesthetics it understands. The exact way that features are mapped to aesthetics is regulated by scales starting with scale_ and the name of an aesthetic:\n\n\nplt <- plt +\n  scale_color_brewer(type = \"qual\")\nplt\n\n\n\n\nWe can add or change labels (like the x-axis-label) by adding the labs function.\n\n\nplt <- plt +\n    labs(x = \"Flipper length [mm]\",\n         y = \"Bill length [mm]\",\n         title = \"Penguins!\",\n         subtitle = \"The 3 penguin species can differentiated by their flipper and bill lengths\")\n\n\n\nThe overall look of the plot is regulated by themes like the premade theme_ functions or more finely regulated with the theme() function, which uses element functions to create the look of individual elements. Autocomplete helps us out a lot here (Ctrl+Space).\n\n\nplt <- plt + \n  theme_minimal() +\n  theme(legend.text = element_text(face = \"bold\"))\nplt\n\n\n\n\nThe Community: There to catch You.\n\nCoding can be incredibly rewarding, but also incredibly frustrating.\n\nLuckily, the R community is with you!\n(“Artwork by @allison_horst” 2020)In the video I give a brief overview of the resources linked below. Come back here anytime as a reference.\nExercises\nThis course is not graded, but I need some way of confirming that you did indeed take part in this course. In order to get the confirmation, you will send your solutions for a minimum of 5 out of the 8 exercises to me before the Friday following the lecture upload on Monday. For each week I would like you to create a fresh Rmarkdown document with your solutions as code as well as any questions that arose during the lecture. This will help me a lot in improving this course.\nWhen you are done solving the exercises, hit the knit button (at the top of the editor panel) and send me the resulting html document via discord or email (confirm that it looks the way you expected beforehand).\nHere are today’s tasks:\nWrite a section of text about your previous experience with data analysis and/or programming (optional, but I can use this information to customize the course).\nWrite the code that loads in the tidyverse and the palmer penguins data set.\nProduce a scatterplot (meaning a plot with points) of the bill length vs. the bill depth, colorcoded by species.\nImaginary bonus points if you manage to use the same colors as in the image above (hint: look at the help page for scale_color_manual() to find out how). Even more bonus points if you also look into the theme() function and it’s arguments, or the theme_<...>() functions to make the plot prettier.\n\nCreate a vector of all odd numbers from 1 to 99 and store it in a variable.\nCreate a second variable that contains the squares of the first.\nStore both variables in a named list and then turn this list into a tibble (the enhanced version of a data.frame\nDiscover a shortcut for the three steps above using the function tibble. Specifically, have a look at the third bullet point in the description of ?tibble::tibble (The two colons :: specify the package a function is coming from. You only need tibble(...) in the code because the tibble package is loaded automatically with the tidyverse. Here, I specify it directly to send you to the correct help page).\nCreate a scatterplot of the two variables stored in the tibble using ggplot.\nWhat geom_ function do you need to add to the plot to add a line that connects your points?\n\nCheck the metadata (YAML) of your Rmarkdown document and make sure it contains your name as the author: .\nHere are a couple more YAML options you can try if you feel adventurous.\n\nSolutions\nThe Office Hour for the solutions and questions is on Friday, Nov 6, 2020 at 10:00. Find the link in the discord.\nResources\nTidyverse\nR for Data Science (Wickham and Grolemund 2017)\nR4DS online Community\nRStudio Cheat Sheets!\nThe Modern Dive (Kim 2019)\nRStudio Education\nRmarkdown\nhttps://rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf\nhttps://rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf\nhttps://bookdown.org/yihui/rmarkdown-cookbook/\nhttps://bookdown.org/yihui/rmarkdown/\nhttps://pandoc.org/MANUAL.html#pandocs-markdown\nhttps://reproducible-analysis-workshop.readthedocs.io/en/latest/6.RMarkdown-knitr.html\nhttps://rmarkdown.rstudio.com/index.html\nR in general\nAdvanced R (Wickham 2019)\nHands on Programming with R (Grolemund and Wickham 2014)\nR Packages (Wickham 2015)\nData Visualization: A Practical Introduction (Healy 2018)\nGraph Cookbook (Chang 2013)\nStatistics\nIntuitive Biostatistics (Motulsky 2017)\nStatistics Done Wrong (Reinhart 2015)\nTalks, Podcasts, Blogs, Videos\nDavid Robinson\nYouTube\nwebsite\n\nJulia Silge\nYouTube\nwebsite\n\nAlison Hill\nwebsite\n\nMisc\nCute and insightful illustrations (“Artwork by @allison_horst” 2020)\nHappy Git with R\nMade with the help of these amazing packages (plus documentation): (R Core Team 2020); (Xie 2020a); (Allaire et al. 2020); (Xie 2015); (Xie 2020b).\n\n\n\nAllaire, JJ, Yihui Xie, Jonathan McPherson, Javier Luraschi, Kevin Ushey, Aron Atkins, Hadley Wickham, Joe Cheng, Winston Chang, and Richard Iannone. 2020. Rmarkdown: Dynamic Documents for r. Manual.\n\n\n“Artwork by @allison_horst.” 2020. https://github.com/allisonhorst/stats-illustrations.\n\n\nChang, Winston. 2013. R Graphics Cookbook: Practical Recipes for Visualizing Data. 1 edition. Beijing Cambridge Farnham Köln Sebastopol Tokyo: O’Reilly Media.\n\n\nGrolemund, Garrett, and Hadley Wickham. 2014. Hands-On Programming with R: Write Your Own Functions and Simulations. Sebastopol, CA: O’Reilly Media.\n\n\nHealy, Kieran. 2018. Data Visualization: A Practical Introduction. 1 edition. Princeton, NJ: Princeton University Press.\n\n\nHorst, Allison, Alison Hill, and Kristen Gorman. 2020. Palmerpenguins: Palmer Archipelago (antarctica) Penguin Data. Manual.\n\n\nKim, Chester Ismay and Albert Y. 2019. Statistical Inference via Data Science. CRC Press.\n\n\nMotulsky, Harvey. 2017. Intuitive Biostatistics: A Nonmathematical Guide to Statistical Thinking. 4 edition. New York: Oxford University Press.\n\n\nR Core Team. 2020. R: A Language and Environment for Statistical Computing. Manual. Vienna, Austria: R Foundation for Statistical Computing.\n\n\nReinhart, Alex. 2015. Statistics Done Wrong: The Woefully Complete Guide. 1 edition. San Francisco: No Starch Press.\n\n\nWickham, Hadley. 2010. “A Layered Grammar of Graphics.” Journal of Computational and Graphical Statistics 19 (1): 3–28. https://doi.org/10.1198/jcgs.2009.07098.\n\n\n———. 2015. R Packages: Organize, Test, Document, and Share Your Code. 1 edition. Sebastopol, CA: O’Reilly Media.\n\n\n———. 2019. Advanced R, Second Edition. 2 edition. Boca Raton: Chapman and Hall/CRC.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Garrett Grolemund. 2017. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. 1 edition. Sebastopol, CA: O’Reilly Media.\n\n\nWilkinson, Leland, D. Wills, D. Rope, A. Norton, and R. Dubbs. 2005. The Grammar of Graphics. 2nd edition. New York: Springer.\n\n\nXie, Yihui. 2015. Dynamic Documents with R and Knitr. Second. Boca Raton, Florida: Chapman and Hall/CRC.\n\n\n———. 2020a. Knitr: A General-Purpose Package for Dynamic Report Generation in r. Manual.\n\n\n———. 2020b. Xaringan: Presentation Ninja. Manual.\n\n\nThis will most likely be future You. And you will thank yourself later↩︎\nThey can also contain dots (.), but it is considered bad practice because it can lead to some confusing edge cases.↩︎\nhttps://allisonhorst.github.io/palmerpenguins/↩︎\n",
    "preview": "lectures/lecture1/lecture1_files/figure-html5/final-penguin-plot-1.png",
    "last_modified": "2020-11-01T23:17:45+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  }
]
