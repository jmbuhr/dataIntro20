[
  {
    "path": "lectures/lecture1/",
    "title": "Coming Soon: Lecture 1",
    "description": "Getting started!",
    "author": [
      {
        "name": "Jannik Buhr",
        "url": "https://jmbuhr.de"
      }
    ],
    "date": "2020-11-02",
    "categories": [
      "lecture"
    ],
    "contents": "\n\nDisclaimer:\nThis is not the finished lecture, but I wanted to give you a sneak peak of how the website will look. I am very much developing this in the open.\n\nVideo\nWatch today’s video here:\n\n\nSlides\nHover over the slides and press f for full screen. Press ? for a list of keyboard shortcuts.\n\n\n\n\nScript\nWhat You will Learn\nThroughout your scientific career — and potentially outside of it — you will encounter various forms of data. Maybe you do an experiment and measured the fluorescence of a molecular probe, or you simply count the penguins at your local zoo. Everything is data in some form or another. But raw numbers without context are meaningless and tables of numbers are not only boring to look at but often hide the actual structure behind the numbers. In this course you will learn to handle different kinds of data. You will learn to create pretty and insightful visualizations, compute different statistics on your data and also what these statistical concepts mean. From penguins to p-values, I got you covered.\nThe course will be held in English, as the concepts covered will directly transfer to the research you do and the papers you will read and write where the working language is English. That being said, feel free to ask questions in any language that I understand, so German is also fine. My Latin is a little rusty, thought.\nIn this course, we will be using the programming language R. R is a language particularly well suited for data analysis because it was initially designed by statisticians and the interactive nature of the language makes it easier to get started. So don’t fret if this is your first encounter with programming, we will take one step at a time.\nTODO: Choice of datasets, context, vote for following datasets\nFirst Things First: Installing R\n\n\n\nBut I was getting ahead of myself. First, we need to install R. You can download the installer for your operating system here: https://cran.r-project.org/. Feel free to post a question if you get stuck. This already gives you the ability to execute R code or use the interactive R console, but it is way more comfortable to use R inside of a so called IDE (Integrated Development Environment). IDEs give you neat things like autocompletion, a window for your plots and a help panel. The main IDE for R is called RStudio. We will be using it for this course and you can download it here: https://www.rstudio.com/products/rstudio/download/#download\n\n\n\nPlease refer to the video for a walkthrough of the different RStudio panes.\nExecuting R Code\nYou can now execute commands in the R console in the bottom left. For example:\n\n\n1 + 1\n\n\n[1] 2\n\nOr generate the numbers from one to 10:\n\n\n1:10\n\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nBut I rarely type directly into the console. Because we want our results to be reproducible, we write our code in a script first so that the next person1 can see what we did and replicate our analysis. You will see that reproducibility is quite near and dear to me, so it will pop up once or twice. And as scientists, I am sure you understand the importance.\nTo create a new script, click the little button in the top left corner. In this script you can type regular R code, but it won’t get executed straight away. To send a line of code to the console to be executed, hit Ctrl+Enter. Go ahead, try it with:\n\n\nplot(1:10)\n\n\n\n\nYou just created your first plot in R! We plotted values of the vector 1:10 vs. it’s index (=the number of the entry). A vector is an ordered collection of things which have the same datatype, where a datatype is something like numbers (numeric), text (character also called string), whole numbers (integer).\nYour code can have comments to tell your future self why you wrote a piece of code the way you did. Any line starting with the number symbol # will be ignored by R.\n\n\n# This line will be ignored\n43 - 1 # as will be the part after this #, but not before it\n\n\n[1] 42\n\nBuilding Blocks of R\nNow it is time to introduce you to the fundamental datatypes of R. We\nAtomic Datatypes\nWhole numbers (integer)\n\n\n1L # denoted by L\n\n\n\nNumbers (numeric, double)\n\n\n12\n12.5\n\n\n\nComplex numbers (complex)\n\n\n1 + 3i # denoted by the small i for the imaginary part\n\n\n\nText (character, string)\n\n\n\"It was night again.\"\n\n\n\nLogical values (boolean, logical)\n\n\nTRUE\nFALSE\n\n\n\nSpecial types that mix with any other type:\n\n\n# NULL for no value\nNULL\n\n# NA for Not Assigned\nNA\n\n\n\nNA is contagious. Any computation involving NA will return NA (because R has no way of knowing the answer):\n\n\nNA + 1\n\n\n[1] NA\n\nmax(NA, 12, 1)\n\n\n[1] NA\n\nYou can ask for the datatype of an object with the function typeof:\n\n\ntypeof(\"hello\")\n\n\n[1] \"character\"\n\nThere is also a concept called factors (factor) for categorical data, but we will talk about that later when we get deeper into vectors.\nVariables\nOften, you will want to store the result of a computation for reuse, or to give it a sensible name and make your code more readable. This is what variables are for. We can assign a value to a variable using the assignment operator <- (In RStudio, there is a shortcut for it: Alt+Minus):\n\n\nmy_number <- 42\n\n\n\nExecuting the above code will not give you any output, but when you use the name of the variable, you can see its content:\n\n\nmy_number\n\n\n[1] 42\n\nAnd you can do operations with those variables:\n\n\nx <- 41\ny <- 1\nx + y\n\n\n[1] 42\n\n\nNOTE Be careful about the order of execution! R enables you to work interactively and to execute the code you write in your script in any order with Ctrl+Enter, but when you execute (=“source”) the whole script, it will be executed from top to bottom.\n\nFurthermore, code is not executed again automatically, if you change some dependency of the expression later on. So the second assignment to x doesn’t change y.\n\n\nx <- 1\ny <- x + 1\nx <- 1000\ny\n\n\n[1] 2\n\nVariable names can contain letters (capitalization matters), numbers (but not as the first character) and underscores _.2\n\n\n# snake_case\nmain_character_name <- \"Kvothe\"\n\n# or camelCase\nbookTitle <- \"The Name of the Wind\"\n\n# you can have numbers in the name\nx1 <- 12\n\n\n\nFunctions\nFunctions are the main workhorses of our data analysis. For example, there are mathematical functions, like sin, cos etc.\n\n\nsin(x = 0)\n\n\n[1] 0\n\nFunctions take arguments (sometimes called parameters) and sometimes they also return something. The sin function takes just one argument x and returns its sine.\nNote, that the = inside the function parenthesis gives x = 0 to the function and has nothing to do with any x defined outside of the function. The parameter x used in the function is separate from any x you might have defined outside of the function. E.g.\n\n\nx <- 10\nsin(x = 0)\n\n\n[1] 0\n\n# x is still 10\nx\n\n\n[1] 10\n\nIf you want to know more about a function in R, execute ? with the function name or press F1 with your mouse over the function. This is actually one of the most important things to learn today, because the help pages can be incredibly helpful.\n\n\n?sin\n\n\n\nWe can pass arguments by name or by order of appearance\n\n\nsin(x = 12)\nsin(12)\n\n\n\nVectors\nThe basic datatypes in R are all vectors, which means they can contain more than one entry. You can create a vector by combining things of the same data type with the function c for combine.\n\n\nx <- c(1, 2, 3, 4, 5, 6)\nx\n\n\n[1] 1 2 3 4 5 6\n\nAny atomic datatype mentioned above can be in a vector, but one vector can store only data of the same type. For example, you can have a character vector (=text)\n\n\nc(\"This\", \"is\", \"a\", \"character\", \"vector\")\n\n\n[1] \"This\"      \"is\"        \"a\"         \"character\" \"vector\"   \n\nor a vector of logical values\n\n\nc(TRUE, FALSE, TRUE, TRUE)\n\n\n[1]  TRUE FALSE  TRUE  TRUE\n\nBut not a vector with say text and numbers. If you try to combine data of a different type, R will force all the data into the more permissive type. Because all Numbers can easily be converted into text, but not all text can be converted to numbers, this makes everything text:\n\n\nc(\"Some text\", 42, 12)\n\n\n[1] \"Some text\" \"42\"        \"12\"       \n\nNote the quotation marks around the numbers, indicating them as text. If you were to try and use them as numbers, you would get and error message.\n\n\n\"12\" + 1\n\n\nError in \"12\" + 1: non-numeric argument to binary operator\n\nProgramming languages are not unlike human languages and the computer will not always understand what you want it to do unless you use exactly the right grammar and vocabulary. However, R will sometimes tell you, that it didn’t understand you through error messages and it is quite the norm to see them a lot. Even experienced programmers are very fond of this advice:\n\n\n\nFigure 1: Maybe the most important programming advice.\n\n\n\nVectorization\nThe basic mathematical operations in R and a lot of functions are vectorized. This means, they operate on every element of the vector. Here, every element is multiplied by 2 and the result is printed to the console.\n\n\nx * 2\n\n\n[1]  2  4  6  8 10 12\n\nThe original vector x was not changed in doing so.\n\n\nx\n\n\n[1] 1 2 3 4 5 6\n\nBut we could have by assigning the result back to x, thus overwriting its previous content. The right hand side (RHS) is executed first:\n\n\nx <- x * 2\n\n\n\nNow x changed:\n\n\nx\n\n\n[1]  2  4  6  8 10 12\n\nA handy way of creating vectors of numbers is with the : operator to specify a range of values:\n\n\n1:5\n\n\n[1] 1 2 3 4 5\n\nOr using the seq function with some additional (optional parameters):\n\n\nseq(from = 1, to = 10, by = 2)\n\n\n[1] 1 3 5 7 9\n\n\nNow you: Look at the documentation/help page for seq and find out how to create a vector of all even numbers from 1 to 100.\n\nFunctions and Packages – Making our lives easier\nYou just learned about the functions sin and seq and briefly used the function plot (which didn’t return anything but instead had the side effect of printing a plot3). But wait, there is more! Not only in the sense that there are more functions in R (what kind of language would that be with only two verbs?!), but also in a more powerful way:\nWe can define our own functions! The syntax (<- grammar for programming languages) is as follows.\n\n\nname_for_the_function <- function(parameter1, parameter2) { # etc.\n  # body of the function with some calculations:\n  result <- parameter1 + parameter2\n  # Something the function should return to the caller\n  return(result)\n}\n\n\n\nThe function ends when it reaches the return keyword. It also ends when it reaches the end of the function body and implicitly returns the last expression. So we could have written it a bit shorter and in fact you will often see people omitting the explicit return at the end:\n\n\nadd <- function(x, y) {\n  x + y\n}\n\n\n\nAnd we can call our freshly defined function:\n\n\nadd(23, 19)\n\n\n[1] 42\n\nGot an error like Error in add(23, 19) : could not find function \"add\"? Check that you did in fact execute the code that defines the function (i.e. put your cursor on the line with the function keyword and hit Ctrl+Enter.).\n\nNow you: Define a function that takes one argument, a vector of numbers, devides each element by the length of the vector (hint: length is the function to get the lenght) and returns the resulting scaled vector.\n\nYou are not the only one using R. There is a welcoming and helpful community out there. Some people also write a bunch of functions and put them together in a so called package. And some people even went a step further. The tidyverse is a collection of packages that play very well together and also iron out some of the quirkier ways in which R works (Wickham et al. 2019). They provide a consistent interface to enable us to do more while having to learn less special cases. The R function install.packages(\"<package_name_here>\") installs packages from CRAN a curated set of R packages.\nThe Tidyverse\nGo ahead and install the tidyverse packages with\n\n\ninstall.packages(\"tidyverse\")\n\n\n\nThis is one exception to our effort of having everything that we run in our script and not just in the console. We don’t want R trying to install the package every time we run the script, as this needs to happen only once. So you can either turn it into a comment, delete it from the script, or only type it in the console. You can also use RStudio’s built-in panel for package installation.\nTo make the functions from a package available to your R session, run library with the name of the package.\n\n\nlibrary(tidyverse)\n\n\n\nThe convention is, to keep all library-calls at the top of your script so that you and others can see straight away, which packages are needed.\nLiterate Programming: Rmarkdown\n(“Artwork by @Allison_horst” 2020)There is another package I would like you to install. It is called Rmarkdown.\n\n\ninstall.packages(\"rmarkdown\")\n\n\n\nRmarkdown enables you to combine text with R code and then produce a range of output formats like pdf, html, word documents, presentations etc. In fact, this whole website, including the slides, was created using Rmarkdown. Sounds exciting? Let’s dive into it! Open up a new Rmarkdown document with the file extension .Rmd from the New File menue in the top left corner of RStudio: File → New File → R Markdown and choose html as the output format. I particularly like html because you don’t have to worry about page breaks and it easily works on screens of different sizes like your phone.\nAn Rmarkdown document consists of three things:\nMetadata:\nInformation about your document such as the author or the date in a format called YAML. This YAML header starts and ends with three minus signs ---.\nText:\nRegular text is interpreted as markdown, meaning it supports things like creating headings by prefixing a line with #, or text that will be bold in the output by surrounding it with **.\nCode chunks:\nStarting with ```{r} and ending with ``` (backticks). They will be interpreted as R code. This is where you write the code like you did in the .R script file. You can insert new chunks with the button on the top right of the editor window or use the shortcut Ctrl+Alt+i.\nUse these to document your thoughts alongside your code when you are doing data analysis. Future you (and reviewer number 2) will be happy! To run code inside of chunks, use, the little play button on the chunk, the tried and true Ctrl+Enter to run one line or Ctrl+Shift+Enter to run the whole chunk. Your chunks can be as large or small as you want, but try to maintain some sensible structure.\nOur First Dataset: The Palmer Penguins\nTODO explain dataset\nSee (Horst, Hill, and Gorman 2020)\n(“Artwork by @Allison_horst” 2020)\n\npenguins <- palmerpenguins::penguins\npenguins\n\n\n# A tibble: 344 x 8\n   species island bill_length_mm bill_depth_mm flipper_length_…\n   <fct>   <fct>           <dbl>         <dbl>            <int>\n 1 Adelie  Torge…           39.1          18.7              181\n 2 Adelie  Torge…           39.5          17.4              186\n 3 Adelie  Torge…           40.3          18                195\n 4 Adelie  Torge…           NA            NA                 NA\n 5 Adelie  Torge…           36.7          19.3              193\n 6 Adelie  Torge…           39.3          20.6              190\n 7 Adelie  Torge…           38.9          17.8              181\n 8 Adelie  Torge…           39.2          19.6              195\n 9 Adelie  Torge…           34.1          18.1              193\n10 Adelie  Torge…           42            20.2              190\n# … with 334 more rows, and 3 more variables: body_mass_g <int>,\n#   sex <fct>, year <int>\n\nStructure in 2D: data.frames and tibbles\nTranslating Data into Visualizations\n\n\nggplot(penguins, aes(flipper_length_mm, bill_length_mm, color = species)) +\n  geom_point(size = 2.5) +\n  labs(x = \"Flipper length [mm]\",\n       y = \"Bill length [mm]\",\n       subtitle = \"The 3 penguin species can differentiated by their flipper and bill lengths\") +\n  theme_minimal() +\n  NULL\n\n\n\n\nThe Community: There to catch You.\n(“Artwork by @Allison_horst” 2020)Exercises\nSolutions\nResources\nTidyverse\nR for Data Science (Wickham and Grolemund 2017)\nR4DS online Community\nRStudio Cheat Sheets!\nThe Modern Dive (Kim 2019)\nRStudio Education\nRmarkdown\nhttps://rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf\nhttps://rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf\nhttps://bookdown.org/yihui/rmarkdown-cookbook/\nhttps://bookdown.org/yihui/rmarkdown/\nhttps://pandoc.org/MANUAL.html#pandocs-markdown\nhttps://reproducible-analysis-workshop.readthedocs.io/en/latest/6.RMarkdown-knitr.html\nhttps://rmarkdown.rstudio.com/index.html\nR in general\nAdvanced R (Wickham 2019)\nHands on Programming with R (Grolemund and Wickham 2014)\nR Packages (Wickham 2015)\nData Visualization: A Practical Introduction (Healy 2018)\nGraph Cookbook (Chang 2013)\nStatistics\nIntuitive Biostatistics (Motulsky 2017)\nStatistics Done Wrong (Reinhart 2015)\nTalks, Podcasts, Blogs\nDavid Robinson, YouTube\nMisc\nCute and insightful illustrations (“Artwork by @Allison_horst” 2020)\nHappy Git with R\nMade with the help of these amazing packages (plus documentation): R Core Team (2020); Xie (2020a); Allaire et al. (2020); Xie (2015); Xie (2020b).\n\n\n\nAllaire, JJ, Yihui Xie, Jonathan McPherson, Javier Luraschi, Kevin Ushey, Aron Atkins, Hadley Wickham, Joe Cheng, Winston Chang, and Richard Iannone. 2020. Rmarkdown: Dynamic Documents for R. Manual.\n\n\n“Artwork by @Allison_horst.” 2020. https://github.com/allisonhorst/stats-illustrations.\n\n\nChang, Winston. 2013. R Graphics Cookbook: Practical Recipes for Visualizing Data. 1 edition. Beijing Cambridge Farnham Köln Sebastopol Tokyo: O’Reilly Media.\n\n\nGrolemund, Garrett, and Hadley Wickham. 2014. Hands-on Programming with R: Write Your Own Functions and Simulations. Sebastopol, CA: O’Reilly Media.\n\n\nHealy, Kieran. 2018. Data Visualization: A Practical Introduction. 1 edition. Princeton, NJ: Princeton University Press.\n\n\nHorst, Allison, Alison Hill, and Kristen Gorman. 2020. Palmerpenguins: Palmer Archipelago (Antarctica) Penguin Data. Manual.\n\n\nKim, Chester Ismay and Albert Y. 2019. Statistical Inference via Data Science. CRC Press.\n\n\nMotulsky, Harvey. 2017. Intuitive Biostatistics: A Nonmathematical Guide to Statistical Thinking. 4 edition. New York: Oxford University Press.\n\n\nR Core Team. 2020. R: A Language and Environment for Statistical Computing. Manual. Vienna, Austria: R Foundation for Statistical Computing.\n\n\nReinhart, Alex. 2015. Statistics Done Wrong: The Woefully Complete Guide. 1 edition. San Francisco: No Starch Press.\n\n\nWickham, Hadley. 2015. R Packages: Organize, Test, Document, and Share Your Code. 1 edition. Sebastopol, CA: O’Reilly Media.\n\n\n———. 2019. Advanced R, Second Edition. 2 edition. Boca Raton: Chapman and Hall/CRC.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Garrett Grolemund. 2017. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. 1 edition. Sebastopol, CA: O’Reilly Media.\n\n\nXie, Yihui. 2015. Dynamic Documents with R and Knitr. Second. Boca Raton, Florida: Chapman and Hall/CRC.\n\n\n———. 2020a. Knitr: A General-Purpose Package for Dynamic Report Generation in R. Manual.\n\n\n———. 2020b. Xaringan: Presentation Ninja. Manual.\n\n\nThis will most likely be future You. And you will thank yourself later↩︎\nThey can also contain dots (.), but it is considered bad practice because it can lead to some confusing edge cases.↩︎\ntechnically, even functions that don’t appear to return something have a return value: NULL↩︎\n",
    "preview": "lectures/lecture1/lecture1_files/figure-html5/final-penguin-plot-1.png",
    "last_modified": "2020-09-30T18:32:23+02:00",
    "input_file": "lecture1.utf8.md",
    "preview_width": 1248,
    "preview_height": 768
  }
]
